@Library('github.com/sorah/jenkinsfile-slack@master') _
pipeline {
    agent {
        docker {
            image 'pipeline_agent'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /dev/shm:/dev/shm'
        }
    }
    stages {
        stage('Test') {
            steps {
                dir('rest_api') {
                    sh "mvn -U clean test"
                }
            }
        }
        stage('Performance Test') {
            steps {
                dir('rest_api') {
                    sh '''
                        mvn package -Dmaven.test.skip=true -DskipTests
                        docker build -t performance_test .
                        docker run --name=performance_test -d  -p 12345:8080 performance_test
                       '''
                }   
                dir('jmeter-test') {
                    sh 'sleep 10' 
                    sh 'rm -rf target/jmeter/reports/jobOffer/*'
                    sh "mvn -U jmeter:jmeter"
                    sh "rm -rf performance_tests_report"
                    sh "git clone https://github.com/adebna/performance_tests_report"
                }   
                dir('jmeter-test/performance_tests_report') {
                    sh "cp -r ../target/jmeter/reports/jobOffer/* ."
                    sh "git add *"
                    sh 'git commit -m "$(date)"'
                    sh 'git push'
                }   
                dir('rest_api') {
                    sh ''' 
                        docker stop performance_test
                        docker rm performance_test
                       ''' 
                }   
            }   
        }   
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    dir('rest_api') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage('Deployment') {
            when {
                branch 'master'
            }
            steps {
                dir('rest_api') {
                    sh '''
                        mvn package -Dmaven.test.skip=true -DskipTests

                        docker build -t production_server .

                        docker stop production || true && docker rm production || true

                        docker run -p 8080:8080 -d --name production production_server
                    '''
                }
            }
        }
    }
    post {
        always {
            postNotifySlack currentBuild.result
        }
    }
}
